variables:
  GRADLE_USER_HOME: $CI_PROJECT_DIR/.gradle
  JIB_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  PROFILE_ACTIVE: $CI_COMMIT_REF_NAME
  JWT_ENC_PWD: $JWT_ENC_PWD

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        JASYPT_ENCRYPTOR_PASSWORD: $MAIN_ENC_PWD
        APP_PORT: 50052
    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        JASYPT_ENCRYPTOR_PASSWORD: $DEV_ENC_PWD
        APP_PORT: 50051

default:
  interruptible: true

stages:
  - preBuild
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - $GRADLE_USER_HOME/wrapper/
    - $GRADLE_USER_HOME/caches/modules-2/
    - $GRADLE_USER_HOME/caches/build-cache/

preBuild:
  stage: preBuild
  script:
    - echo "Gradle 이미지 확인"
    - |
      $imageExists = docker images -q gradle:8.11.1-jdk17-alpine
      if (-not $imageExists) {
        Write-Host "이미지가 존재하지 않아 다운로드합니다."
        docker pull gradle:8.11.1-jdk17-alpine
      } else {
        Write-Host "이미지가 이미 존재합니다."
      }
  tags:
    - winos

build:
  stage: build
  needs: [preBuild]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "dev"
  script:
#    - ./gradlew.bat clean jib --no-daemon
    - echo "jib 실행"
    - |
      set JIB_IMAGE=${JIB_IMAGE} && 
      set PROFILE_ACTIVE=${PROFILE_ACTIVE} && 
      set JWT_ENC_PWD=${JWT_ENC_PWD} && 
      set JASYPT_ENCRYPTOR_PASSWORD=${JASYPT_ENCRYPTOR_PASSWORD} && 
      set TOKEN_USER=${TOKEN_USER} && 
      set TOKEN_PWD=${TOKEN_PWD} && 
      docker run --rm -v ${CI_PROJECT_DIR}:/home/gradle/project -w /home/gradle/project gradle:8.11.1-jdk17-alpine ./gradlew clean jib --no-daemon
    - echo "jib 완료"
  tags:
    - winos

deploy:
  stage: deploy
  needs: [build]
  variables:
    IMAGE_PATH: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
    CONTAINER_NAME: $CI_PROJECT_NAME-$CI_COMMIT_REF_NAME
    VOLUME_PATH: "C:/service/planverse"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "dev"
  before_script:
    - docker login $CI_REGISTRY -u $TOKEN_USER --password $TOKEN_PWD
  script:
    - echo "Container 실행"
    - docker pull $IMAGE_PATH
    - docker stop $CONTAINER_NAME;echo $?
    - docker rm -f $CONTAINER_NAME;echo $?
    - docker run -d -p ${APP_PORT}:${APP_PORT} -v ${VOLUME_PATH}:/planverse --restart=unless-stopped --name $CONTAINER_NAME $IMAGE_PATH
    - docker system prune -f
    - echo "Container 실행 완료"
  after_script:
    - docker logout
  tags:
    - winos
